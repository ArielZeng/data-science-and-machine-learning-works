def step1_read_csv(_file):
    with open(_file) as r:
        lines = r.readlines()
        return lines
lines = step1_read_csv("europe_population.csv")
for i in range(5):
    print(lines[i])

def step2_cities_sort_by_surviving(lines):
    cities = lines[0].strip('\n')
    # print(cities)
    cities = cities.split(',')[1:]
    # print(cities)
    age0 = lines[1].strip('\n')
    age0 = age0.split(',')[1:]
    age1 = lines[2].strip('\n')
    age1 = age1.split(',')[1:]

    pairs = []
    for i in range(len(age0)):
        total = int(age0[i])
        survive = int(age1[i])
        rate = 1.0 * survive / total
        pairs.append((cities[i], rate))

    # print(pairs)
    pairs.sort(key=lambda x: x[1], reverse=True)
    # print(pairs)
    return [x[0] for x in pairs]
    # return pairs
ret = step2_cities_sort_by_surviving(lines)
print(ret)

def step3_write_death_rate(lines):
    cities = lines[0].strip('\n')
    # print(cities)
    cities = cities.split(',')[1:]
    # print(cities)
    output = []
    output.append("Death_rate," + ",".join(cities) + "\n")

    for line_no in range(2, len(lines)):
        age0 = lines[line_no-1].strip('\n')
        age0 = age0.split(',')[1:]
        age1 = lines[line_no].strip('\n')
        age1 = age1.split(',')[1:]

        year0_rate = []
        for i in range(len(age0)):
            total = int(age0[i])
            survive = int(age1[i])
            year0_rate.append(f"{1.0 - survive / total:.4f}")

        output.append(str(line_no-1) + "," + ",".join(year0_rate) + "\n")

    with open("europe_population_death_rates.csv", 'w') as w:
        w.writelines(output)
step3_write_death_rate(lines)

def step4_get_death_rate_per_city(lines):
    cities = lines[0].strip('\n')
    cities = cities.split(',')[1:]
    mat = [cities]
    E = []
    S = []

    for line_no in range(2, len(lines)):
        age0 = lines[line_no - 1].strip('\n')
        age0 = age0.split(',')[1:]
        age1 = lines[line_no].strip('\n')
        age1 = age1.split(',')[1:]

        year0_rate = []
        for i in range(len(age0)):
            total = int(age0[i])
            survive = int(age1[i])
            year0_rate.append(1.0 - survive / total)

            if 2 == line_no:
                S.append(total)
            elif len(lines) - 1 == line_no:
                E.append(survive)

        mat.append(year0_rate)

    avr_val = []
    med_val = []
    ann_val = []
    avr_arr = []
    med_arr = []
    ann_arr = []
    for city_no in range(len(cities)):
        rate_arr = []
        for i in range(1, len(mat)):
            rate_arr.append(mat[i][city_no])

        rate_arr.sort()
        avr = sum(rate_arr) / len(rate_arr)
        avr = avr * 100
        median_loc = len(rate_arr) // 2   #    3 // 2 = 1   0 1 2                4 // 2 = 2  0 1 2 3
        median_loc2 = median_loc - 1
        median = mat[median_loc][city_no] + mat[median_loc2][city_no] / 2
        median = median * 100
        annualized = pow(E[city_no] / S[city_no], 1 / 90) - 1
        annualized = annualized * 100
        # print(avr, median, annualized)
        avr_arr.append(f"{avr:.2f}%")
        med_arr.append(f"{median:.2f}%")
        ann_arr.append(f"{annualized:.2f}%")
        avr_val.append(avr)
        med_val.append(median)
        ann_val.append(annualized)

    with open("step4_death_rate_stat.csv", 'w') as w:
        w.writelines("Death_rate," + ",".join(cities) + "\n")
        w.writelines("avr," + ",".join(avr_arr) + "\n")
        w.writelines("median," + ",".join(med_arr) + "\n")
        w.writelines("ann," + ",".join(ann_arr) + "\n")

    return cities, avr_val, med_val, ann_val
cities, avr_arr, med_arr, ann_arr = step4_get_death_rate_per_city(lines)

#step5
max_avr_city = cities[avr_arr.index(max(avr_arr))]
max_med_city = cities[med_arr.index(max(med_arr))]
max_ann_city = cities[ann_arr.index(max(ann_arr))]
print("max_avr: ", max_avr_city)
print("max_med: ", max_med_city)
print("max_ann: ", max_ann_city)

#step6
min_avr_city = cities[avr_arr.index(min(avr_arr))]
min_med_city = cities[med_arr.index(min(med_arr))]
min_ann_city = cities[ann_arr.index(min(ann_arr))]
print("min_avr: ", min_avr_city)
print("min_med: ", min_med_city)
print("min_ann: ", min_ann_city)

def stat_consecutive(seq, match_char):
    pos_max = 0
    sub_start = 0

    while sub_start < len(seq):
        while sub_start < len(seq) and seq[sub_start] != match_char:
            sub_start += 1
        sub_end = sub_start + 1
        while sub_end < len(seq) and seq[sub_end] == match_char:
            sub_end += 1
        cur = sub_end - sub_start
        pos_max = max(pos_max, cur)
        sub_start = sub_end
    return pos_max


def step7_second_order_diff(lines):
    cities = lines[0].strip('\n')
    cities = cities.split(',')[1:]
    mat = []
    for line_no in range(2, len(lines)):
        age0 = lines[line_no - 1].strip('\n')
        age0 = age0.split(',')[1:]
        age1 = lines[line_no].strip('\n')
        age1 = age1.split(',')[1:]

        year0_rate = []
        for i in range(len(age0)):
            total = int(age0[i])
            survive = int(age1[i])
            year0_rate.append(1.0 - survive / total)

        mat.append(year0_rate)

    seq_list = []
    consecutive_pos_list = []
    consecutive_neg_list = []
    with open("step7_2nd_order_death.csv", "w") as w:
        for city_no in range(len(cities)):
            w.write(cities[city_no] + ",")
            seq = ""
            for i in range(1, len(mat)):
                prev = i - 1
                diff = mat[i][city_no] - mat[prev][city_no]
                if diff >= 0:
                    seq = seq + "+"
                else:
                    seq = seq + "-"

            n_positive = seq.count("+")
            n_negative = seq.count("-")
            n_consecutive_pos = stat_consecutive(seq, "+")
            n_consecutive_neg = stat_consecutive(seq, "-")
            w.write(f"{n_positive}, {n_negative}, {n_consecutive_pos}, {n_consecutive_neg},")
            w.write(seq + "\n")
            seq_list.append(seq)
            consecutive_pos_list.append(n_consecutive_pos)
            consecutive_neg_list.append(n_consecutive_neg)

    return cities, seq_list, consecutive_pos_list, consecutive_neg_list

#step8
cities, seq_list, consecutive_pos, consecutive_neg = step7_second_order_diff(lines)
longest_increasing_city = cities[consecutive_pos.index(max(consecutive_pos))]
print("longest_inc: ", longest_increasing_city)

#step9
longest_decreasing_city = cities[consecutive_neg.index(max(consecutive_neg))]
print("longest_dec: ", longest_decreasing_city)
